[{"E:\\ReactProjects\\react_blog\\admin\\src\\Pages\\Main.js":"1","E:\\ReactProjects\\react_blog\\admin\\src\\index.js":"2","E:\\ReactProjects\\react_blog\\admin\\src\\Pages\\Login.js":"3","E:\\ReactProjects\\react_blog\\admin\\src\\Pages\\AdminIndex.js":"4","E:\\ReactProjects\\react_blog\\admin\\src\\Pages\\AddArticle.js":"5","E:\\ReactProjects\\react_blog\\admin\\src\\config\\apiUrl.js":"6","E:\\ReactProjects\\react_blog\\admin\\src\\Pages\\ArticleList.js":"7"},{"size":489,"mtime":1607095439868,"results":"8","hashOfConfig":"9"},{"size":599,"mtime":1607002553224,"results":"10","hashOfConfig":"9"},{"size":2504,"mtime":1607075155706,"results":"11","hashOfConfig":"9"},{"size":2813,"mtime":1607132307744,"results":"12","hashOfConfig":"9"},{"size":6974,"mtime":1607092846702,"results":"13","hashOfConfig":"9"},{"size":659,"mtime":1607140880001,"results":"14","hashOfConfig":"9"},{"size":2602,"mtime":1607141007050,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1vd6yi9",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\ReactProjects\\react_blog\\admin\\src\\Pages\\Main.js",[],["35","36"],"E:\\ReactProjects\\react_blog\\admin\\src\\index.js",[],["37","38"],"E:\\ReactProjects\\react_blog\\admin\\src\\Pages\\Login.js",[],["39","40"],"E:\\ReactProjects\\react_blog\\admin\\src\\Pages\\AdminIndex.js",["41","42"],"/*\r\n * @Author: DaZheng\r\n * @Date: 2020-12-03 22:34:39\r\n * @LastEditors: g05047\r\n * @LastEditTime: 2020-12-05 09:38:27\r\n * @Description: file content\r\n */\r\nimport React, {useState} from 'react'\r\nimport { Layout, Menu, Breadcrumb } from 'antd';\r\n\r\nimport { Route } from 'react-router-dom'\r\nimport AddArticle from './AddArticle'\r\nimport ArticleList from './ArticleList'\r\n\r\nimport '../static/css/AdminIndex.css'\r\nimport {\r\n  DesktopOutlined,\r\n  PieChartOutlined,\r\n  FileOutlined,\r\n  // eslint-disable-next-line\r\n  TeamOutlined,\r\n  UserOutlined,\r\n} from '@ant-design/icons';\r\n\r\n// eslint-disable-next-line\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n \r\nfunction AdminIndex (props) {\r\n  const [collapsed, setCollapsed] = useState(false)\r\n\r\n  const onCollapse = collapsed => {\r\n    setCollapsed(collapsed)\r\n  };\r\n\r\n  const handleClickArticle = e => {\r\n    if (e.key == 'addArticle') {\r\n      props.history.push('/index/add')\r\n    } else if (e.key == 'articleList') {\r\n      props.history.push('/index/list')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Layout style={{ minHeight: '100vh' }}>\r\n      <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\r\n        <div className=\"logo\" />\r\n        <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n          <Menu.Item key=\"1\" icon={<PieChartOutlined />}>\r\n            工作台\r\n          </Menu.Item>\r\n          <Menu.Item key=\"2\" icon={<DesktopOutlined />}>\r\n            添加文章\r\n          </Menu.Item>\r\n          <SubMenu \r\n            key=\"sub1\" \r\n            icon={<UserOutlined />} \r\n            title=\"文章管理\"\r\n            onClick={handleClickArticle}\r\n          >\r\n            <Menu.Item key=\"addArticle\">添加文章</Menu.Item>\r\n            <Menu.Item key=\"articleList\">文章列表</Menu.Item>\r\n          </SubMenu>\r\n          <Menu.Item key=\"9\" icon={<FileOutlined />}>\r\n            留言管理\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n        <Content style={{ margin: '0 16px' }}>\r\n          <Breadcrumb style={{ margin: '16px 0' }}>\r\n            <Breadcrumb.Item>后台管理系统</Breadcrumb.Item>\r\n            <Breadcrumb.Item>工作台</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n          <div className=\"site-layout-background\" style={{ padding: 24, minHeight: 360 }}>\r\n            <div>\r\n              <Route path=\"/index/\" exact component={AddArticle} />\r\n              <Route path=\"/index/add/\" exact component={AddArticle} />\r\n              <Route path=\"/index/list/\" exact component={ArticleList} />\r\n            </div>\r\n          </div>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}>zhengjunqin.top ©2020 Created by Ant UED</Footer>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default AdminIndex","E:\\ReactProjects\\react_blog\\admin\\src\\Pages\\AddArticle.js",["43","44","45","46"],"/*\r\n * @Author: DaZheng\r\n * @Date: 2020-12-03 22:57:43\r\n * @LastEditors: g05047\r\n * @LastEditTime: 2020-12-04 22:40:46\r\n * @Description: file content\r\n */\r\nimport React, { useState, useEffect, useReducer } from 'react'\r\nimport marked from 'marked'\r\nimport '../static/css/AddArticle.css'\r\nimport { Row, Col, Input, Select, Button, DatePicker, message } from 'antd'\r\nimport axios from 'axios'\r\n\r\nimport servicePath from '../config/apiUrl'\r\nconst { Option } = Select\r\nconst { TextArea } = Input\r\n\r\nfunction AddArticle (props) {\r\n\r\n  // eslint-disable-next-line\r\n  const [articleId,setArticleId] = useState(0)  // 文章的ID，如果是0说明是新增加，如果不是0，说明是修改\r\n  // eslint-disable-next-line\r\n  const [articleTitle,setArticleTitle] = useState('')   //文章标题\r\n  // eslint-disable-next-line\r\n  const [articleContent , setArticleContent] = useState('')  //markdown的编辑内容\r\n  const [markdownContent, setMarkdownContent] = useState('预览内容') //html内容\r\n  const [introducemd,setIntroducemd] = useState()            //简介的markdown内容\r\n  const [introducehtml,setIntroducehtml] = useState('等待编辑') //简介的html内容\r\n  // eslint-disable-next-line\r\n  const [showDate,setShowDate] = useState()   //发布日期\r\n  // eslint-disable-next-line\r\n  const [updateDate,setUpdateDate] = useState() //修改日志的日期\r\n  // eslint-disable-next-line\r\n  const [typeInfo ,setTypeInfo] = useState([]) // 文章类别信息\r\n  // eslint-disable-next-line\r\n  const [selectedType,setSelectType] = useState('选择类型') //选择的文章类别\r\n\r\n  useEffect( () => {\r\n    getTypeInfo()\r\n  }, [])\r\n\r\n  marked.setOptions({\r\n    renderer: new marked.Renderer(),\r\n    gfm: true,\r\n    pedantic: false,\r\n    sanitize: false,\r\n    tables: true,\r\n    breaks: false,\r\n    smartLists: true,\r\n    smartypants: false,\r\n  }); \r\n\r\n  const changeContent = (e) => {\r\n    setArticleContent(e.target.value)\r\n    let html = marked(e.target.value)\r\n    setMarkdownContent(html)\r\n  }\r\n\r\n  const changeIntroduce = (e) => {\r\n    setIntroducemd(e.target.value)\r\n    let html = marked(e.target.value)\r\n    setIntroducehtml(html)\r\n  }\r\n\r\n  const getTypeInfo = () => {\r\n    axios({\r\n      method: 'get',\r\n      url: servicePath.getTypeInfo,\r\n      withCredentials: true\r\n    }).then(\r\n      res => {\r\n        if (res.data.data == '没有登录') {\r\n          localStorage.removeItem('openId')\r\n          props.history.push('/')\r\n        } else {\r\n          setTypeInfo(res.data.data)\r\n        }\r\n      }\r\n    ) \r\n  }\r\n\r\n  const selectTypeHandler = (value) => {\r\n    setSelectType(value)\r\n  }\r\n\r\n  const saveArticle = () => {\r\n    if (!selectedType) {\r\n      message.error('必须选择文章类型')\r\n      return false\r\n    } else if (!articleTitle) {\r\n      message.error('文章名称不能为空')\r\n      return false\r\n    } else if (!articleContent) {\r\n      message.error('文章内容不能为空')\r\n      return false\r\n    } else if (!introducemd) {\r\n      message.error('文章简介不能为空')\r\n      return false\r\n    } else if (!showDate) {\r\n      message.error('发布日期不能为空')\r\n      return false\r\n    } else if (selectedType === '选择类型') {\r\n      message.error('请选择类型')\r\n      return false\r\n    }\r\n    let dataProps = {}\r\n    dataProps.type_id = selectedType\r\n    dataProps.title = articleTitle\r\n    dataProps.article_content = articleContent\r\n    dataProps.introduce = introducemd\r\n    let dateText = showDate.replace('-', '/')\r\n    dataProps.addTime = (new Date(dateText).getTime() / 1000)\r\n\r\n    if (articleId == 0) {\r\n      dataProps.view_count = 0\r\n      axios({\r\n        method: 'post',\r\n        url: servicePath.addArticle,\r\n        data: dataProps,\r\n        withCredentials: true\r\n      }).then(\r\n        res => {\r\n          setArticleId(res.data.insertId)\r\n          if (res.data.isSuccess) {\r\n            message.success('文章添加成功')\r\n          } else {\r\n            message.success('文章添加失败')\r\n          }\r\n        }\r\n      )\r\n    } else {\r\n      dataProps.id = articleId\r\n      axios({\r\n        method: 'post',\r\n        url: servicePath.updateArticle,\r\n        data: dataProps,\r\n        withCredentials: true\r\n      }).then(\r\n        res => {\r\n          if (res.data.isSuccess) {\r\n            message.success('文章修改成功')\r\n          } else {\r\n            message.error('修改失败')\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Row gutter={5}>\r\n        <Col span={18}>\r\n          <Row gutter={10}>\r\n            <Col span=\"20\">\r\n              <Input \r\n                value={articleTitle}\r\n                placeholder=\"博客标题\"\r\n                size=\"large\"\r\n                onChange={e => setArticleTitle(e.target.value)}\r\n              />\r\n            </Col>\r\n            <Col span={4}>\r\n              &nbsp;\r\n              <Select defaultValue={selectedType} size=\"large\" onChange={selectTypeHandler}>\r\n                {\r\n                  typeInfo.map((item, index) => {\r\n                    return (<Option key={index} value={item.id}>{item.typeName}</Option>)\r\n                  })\r\n                }\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n          <br />\r\n          <Row gutter={10}>\r\n            <Col span={12}>\r\n              <TextArea \r\n                className=\"markdown-content\"\r\n                rows={35}\r\n                placeholder=\"文章内容\"\r\n                onChange={changeContent}\r\n                onPressEnter={changeContent}\r\n              />\r\n            </Col>\r\n            <Col span={12}>\r\n              <div className=\"show-html\"\r\n                dangerouslySetInnerHTML={{__html: markdownContent}}\r\n              ></div>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n        <Col span={6}>\r\n          <Row>\r\n            <Col span=\"24\">\r\n              <Button size=\"large\">暂存文章</Button>&nbsp;\r\n              <Button type=\"primary\" size=\"large\" onClick={saveArticle}>发布文章</Button>\r\n              <br/>\r\n            </Col>\r\n            <Col span=\"24\">\r\n              <br/>\r\n              <TextArea\r\n                rows={4}\r\n                placeholder=\"文章简介\"\r\n                value={introducemd}\r\n                onChange={changeIntroduce}\r\n                onPressEnter={changeIntroduce}\r\n              ></TextArea>\r\n              <br/><br/>\r\n              <div className=\"introduce-html\"\r\n                dangerouslySetInnerHTML = {{__html: '文章简介：' + introducehtml}}\r\n              ></div>\r\n            </Col>\r\n            <Col span={12}>\r\n              <div className=\"date-select\">\r\n                <DatePicker \r\n                  onChange={(date, dateString) => setShowDate(dateString)}\r\n                  placeholder=\"发布日期\"\r\n                  size=\"large\"\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddArticle","E:\\ReactProjects\\react_blog\\admin\\src\\config\\apiUrl.js",[],"E:\\ReactProjects\\react_blog\\admin\\src\\Pages\\ArticleList.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"47","replacedBy":"51"},{"ruleId":"49","replacedBy":"52"},{"ruleId":"47","replacedBy":"53"},{"ruleId":"49","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":37,"column":15,"nodeType":"57","messageId":"58","endLine":37,"endColumn":17},{"ruleId":"55","severity":1,"message":"56","line":39,"column":22,"nodeType":"57","messageId":"58","endLine":39,"endColumn":24},{"ruleId":"59","severity":1,"message":"60","line":8,"column":38,"nodeType":"61","messageId":"62","endLine":8,"endColumn":48},{"ruleId":"63","severity":1,"message":"64","line":40,"column":6,"nodeType":"65","endLine":40,"endColumn":8,"suggestions":"66"},{"ruleId":"55","severity":1,"message":"56","line":72,"column":27,"nodeType":"57","messageId":"58","endLine":72,"endColumn":29},{"ruleId":"55","severity":1,"message":"56","line":114,"column":19,"nodeType":"57","messageId":"58","endLine":114,"endColumn":21},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],["67"],["68"],["67"],["68"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTypeInfo'. Either include it or remove the dependency array.","ArrayExpression",["69"],"no-global-assign","no-unsafe-negation",{"desc":"70","fix":"71"},"Update the dependencies array to be: [getTypeInfo]",{"range":"72","text":"73"},[1480,1482],"[getTypeInfo]"]